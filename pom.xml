<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.0.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>swagger-sample</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>swagger-sample</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
		
		
		
		<!-- <swagger2markup.version>1.3.1</swagger2markup.version> -->
        <swagger2markup.plugin.version>1.3.7</swagger2markup.plugin.version>
        <swagger2markup.extension.version>1.3.3</swagger2markup.extension.version>

        <asciidoctorj.version>1.6.2</asciidoctorj.version>
        <!-- <asciidoctorj.pdf.version>1.5.0-alpha.15</asciidoctorj.pdf.version> -->
        <jruby.version>9.2.6.0</jruby.version>

        <swagger.input>${project.build.directory}/generated/swagger-ui/swagger.json</swagger.input>
        <asciidoctor.input.directory>${project.basedir}/src/docs/asciidoc</asciidoctor.input.directory>
        <generated.asciidoc.directory>${project.build.directory}/asciidoc</generated.asciidoc.directory>
        <asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
        <asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>io.swagger</groupId>
            <artifactId>swagger-core</artifactId>
            <version>1.5.21</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- <dependency>
			<groupId>com.github.kongchen</groupId>
			<artifactId>swagger-maven-plugin</artifactId>
			<version>3.1.8</version>
		</dependency> -->
		
		<!-- <dependency>
			<groupId>io.github.swagger2markup</groupId>
			<artifactId>swagger2markup-maven-plugin</artifactId>
			<version>${swagger2markup.plugin.version}</version>
		</dependency> -->
		<!-- <dependency>
                        <groupId>org.jruby</groupId>
                        <artifactId>jruby-complete</artifactId>
                        <version>${jruby.version}</version>
                    </dependency> -->
                    
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.github.kongchen</groupId>
				<artifactId>swagger-maven-plugin</artifactId>
				<version>3.1.8</version>
				<configuration>
					<encoding>UTF-8</encoding>
					<apiSources>
						<apiSource>
							<springmvc>true</springmvc>
							<schemes>
								<scheme>http</scheme>
								<scheme>https</scheme>
							</schemes>
							<locations>
								<location>com.example</location>
							</locations>
							<info>
								<title>Swagger sample Documentation</title>
								<version>${project.version}</version>
								<!-- use markdown here because I'm using markdown for output, if 
									you need to use html or other markup language, you need to use your target 
									language, and note escape your description for xml -->
								<description>This is a sample.</description>
								<termsOfService>http://www.github.com/kongchen/swagger-maven-plugin</termsOfService>
								<contact>
									<email>kongchen@gmail.com</email>
									<name>Kong Chen</name>
									<url>http://kongch.com</url>
								</contact>
								<license>
									<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
									<name>Apache 2.0</name>
								</license>
							</info>
							<!-- Support classpath or file absolute path here. 1) classpath e.g: 
								"classpath:/markdown.hbs", "classpath:/templates/hello.html" 2) file e.g: 
								"${basedir}/src/main/resources/markdown.hbs", "${basedir}/src/main/resources/template/hello.html" -->
							<!-- 指定templatePath和outputPath 可以生成简单的html api文档， 不需要使用其它插件 -->
							<!-- <templatePath>${basedir}/templates/strapdown.html.hbs</templatePath>
							<outputPath>${basedir}/generated/document.html</outputPath> -->
							<swaggerDirectory>${project.build.directory}/generated/swagger-ui</swaggerDirectory>
							<attachSwaggerArtifact>false</attachSwaggerArtifact>
							<!-- version 3.1.8 必须指定 outputFormats -->
							<outputFormats>json</outputFormats>
						</apiSource>
					</apiSources>
				</configuration>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
			        <!-- Adding dependency to swagger-hibernate-validations to enable the BeanValidator as a custom
			             model converter -->
			        <dependency>
			            <groupId>io.swagger</groupId>
			            <artifactId>swagger-hibernate-validations</artifactId>
			            <version>1.5.6</version>
			        </dependency>
			    </dependencies>
			</plugin>
			
			<!-- First, use the swagger2markup plugin to generate asciidoc -->
            <plugin>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup-maven-plugin</artifactId>
                <version>${swagger2markup.plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>io.github.swagger2markup</groupId>
                        <artifactId>swagger2markup-import-files-ext</artifactId>
                        <version>${swagger2markup.extension.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <swaggerInput>${swagger.input}</swaggerInput>
                    <outputDir>${generated.asciidoc.directory}</outputDir>
                    <config>
                        <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                        <swagger2markup.pathsGroupedBy>AS_IS</swagger2markup.pathsGroupedBy>
                        <swagger2markup.extensions.dynamicOverview.contentPath>${project.basedir}/src/docs/asciidoc/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>
                        <swagger2markup.extensions.dynamicDefinitions.contentPath>${project.basedir}/src/docs/asciidoc/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>
                        <swagger2markup.extensions.dynamicPaths.contentPath>${project.basedir}/src/docs/asciidoc/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>
                        <swagger2markup.extensions.dynamicSecurity.contentPath>${project.basedir}/src/docs/asciidoc/extensions/security</swagger2markup.extensions.dynamicSecurity.contentPath>
                    </config>
                </configuration>
                <executions>
                    <execution>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>convertSwagger2markup</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Run the generated asciidoc through Asciidoctor to generate
                 other documentation types, such as PDFs or HTML5 -->
            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>1.5.7.1</version>
                <!-- Include Asciidoctor PDF for pdf generation -->
                <dependencies>
                    <!-- <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj-pdf</artifactId>
                        <version>${asciidoctorj.pdf.version}</version>
                    </dependency> -->
                    <!-- Comment this section to use the default jruby artifact provided by the plugin -->
                    <!-- <dependency>
                        <groupId>org.jruby</groupId>
                        <artifactId>jruby-complete</artifactId>
                        <version>${jruby.version}</version>
                    </dependency> -->
                    <!-- Comment this section to use the default AsciidoctorJ artifact provided by the plugin -->
                    <!-- <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj</artifactId>
                        <version>${asciidoctorj.version}</version>
                    </dependency> -->
                </dependencies>
                <!-- Configure generic document generation settings -->
                <configuration>
                    <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
                    <sourceDocumentName>index.adoc</sourceDocumentName>
                    <attributes>
                        <doctype>book</doctype>
                        <toc>left</toc>
                        <toclevels>3</toclevels>
                        <numbered></numbered>
                        <hardbreaks></hardbreaks>
                        <sectlinks></sectlinks>
                        <sectanchors></sectanchors>
                        <generated>${generated.asciidoc.directory}</generated>
                    </attributes>
                </configuration>
                <!-- Since each execution can only handle one backend, run
                     separate executions for each desired output type -->
                <executions>
                    <execution>
                        <id>output-html</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>html5</backend>
                            <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
                            <attributes>
						        <revnumber>${project.version}</revnumber>
						        <revdate>${maven.build.timestamp}</revdate>
						        <organization>${project.organization.name}</organization>
						        <reproducible>true</reproducible>
						        <!-- <nofooter>true</nofooter> -->
						        <!-- <nofootnotes>true</nofootnotes>
						        <noheader>true</noheader> -->
						        
						    </attributes>
                        </configuration>
                    </execution>

                    <!-- <execution>
                        <id>output-pdf</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>pdf</backend>
                            <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>
                        </configuration>
                    </execution> -->
                </executions>
            </plugin>
		</plugins>
	</build>

</project>
